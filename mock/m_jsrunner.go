// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/js/jsrunner.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/js/jsrunner.go --package mock_ez --destination mock/m_jsrunner.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIJsUtils is a mock of IJsUtils interface.
type MockIJsUtils struct {
	ctrl     *gomock.Controller
	recorder *MockIJsUtilsMockRecorder
	isgomock struct{}
}

// MockIJsUtilsMockRecorder is the mock recorder for MockIJsUtils.
type MockIJsUtilsMockRecorder struct {
	mock *MockIJsUtils
}

// NewMockIJsUtils creates a new mock instance.
func NewMockIJsUtils(ctrl *gomock.Controller) *MockIJsUtils {
	mock := &MockIJsUtils{ctrl: ctrl}
	mock.recorder = &MockIJsUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJsUtils) EXPECT() *MockIJsUtilsMockRecorder {
	return m.recorder
}

// ExecAddonScript mocks base method.
func (m *MockIJsUtils) ExecAddonScript(a ez.IAddon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecAddonScript", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecAddonScript indicates an expected call of ExecAddonScript.
func (mr *MockIJsUtilsMockRecorder) ExecAddonScript(a any) *MockIJsUtilsExecAddonScriptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecAddonScript", reflect.TypeOf((*MockIJsUtils)(nil).ExecAddonScript), a)
	return &MockIJsUtilsExecAddonScriptCall{Call: call}
}

// MockIJsUtilsExecAddonScriptCall wrap *gomock.Call
type MockIJsUtilsExecAddonScriptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIJsUtilsExecAddonScriptCall) Return(arg0 error) *MockIJsUtilsExecAddonScriptCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIJsUtilsExecAddonScriptCall) Do(f func(ez.IAddon) error) *MockIJsUtilsExecAddonScriptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIJsUtilsExecAddonScriptCall) DoAndReturn(f func(ez.IAddon) error) *MockIJsUtilsExecAddonScriptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
