// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/addon_reader.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/addon_reader.go --destination mock/m_addon_reader.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIAddonReader is a mock of IAddonReader interface.
type MockIAddonReader struct {
	ctrl     *gomock.Controller
	recorder *MockIAddonReaderMockRecorder
	isgomock struct{}
}

// MockIAddonReaderMockRecorder is the mock recorder for MockIAddonReader.
type MockIAddonReaderMockRecorder struct {
	mock *MockIAddonReader
}

// NewMockIAddonReader creates a new mock instance.
func NewMockIAddonReader(ctrl *gomock.Controller) *MockIAddonReader {
	mock := &MockIAddonReader{ctrl: ctrl}
	mock.recorder = &MockIAddonReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddonReader) EXPECT() *MockIAddonReaderMockRecorder {
	return m.recorder
}

// CheckAddonCompatibility mocks base method.
func (m *MockIAddonReader) CheckAddonCompatibility() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddonCompatibility")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAddonCompatibility indicates an expected call of CheckAddonCompatibility.
func (mr *MockIAddonReaderMockRecorder) CheckAddonCompatibility() *MockIAddonReaderCheckAddonCompatibilityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddonCompatibility", reflect.TypeOf((*MockIAddonReader)(nil).CheckAddonCompatibility))
	return &MockIAddonReaderCheckAddonCompatibilityCall{Call: call}
}

// MockIAddonReaderCheckAddonCompatibilityCall wrap *gomock.Call
type MockIAddonReaderCheckAddonCompatibilityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonReaderCheckAddonCompatibilityCall) Return(arg0 string, arg1 error) *MockIAddonReaderCheckAddonCompatibilityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonReaderCheckAddonCompatibilityCall) Do(f func() (string, error)) *MockIAddonReaderCheckAddonCompatibilityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonReaderCheckAddonCompatibilityCall) DoAndReturn(f func() (string, error)) *MockIAddonReaderCheckAddonCompatibilityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtractConfiguration mocks base method.
func (m *MockIAddonReader) ExtractConfiguration(unconfigured *ez.Addon) (*ez.AddonConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractConfiguration", unconfigured)
	ret0, _ := ret[0].(*ez.AddonConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractConfiguration indicates an expected call of ExtractConfiguration.
func (mr *MockIAddonReaderMockRecorder) ExtractConfiguration(unconfigured any) *MockIAddonReaderExtractConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractConfiguration", reflect.TypeOf((*MockIAddonReader)(nil).ExtractConfiguration), unconfigured)
	return &MockIAddonReaderExtractConfigurationCall{Call: call}
}

// MockIAddonReaderExtractConfigurationCall wrap *gomock.Call
type MockIAddonReaderExtractConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonReaderExtractConfigurationCall) Return(arg0 *ez.AddonConfig, arg1 error) *MockIAddonReaderExtractConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonReaderExtractConfigurationCall) Do(f func(*ez.Addon) (*ez.AddonConfig, error)) *MockIAddonReaderExtractConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonReaderExtractConfigurationCall) DoAndReturn(f func(*ez.Addon) (*ez.AddonConfig, error)) *MockIAddonReaderExtractConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtractJSON mocks base method.
func (m *MockIAddonReader) ExtractJSON(input string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractJSON", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ExtractJSON indicates an expected call of ExtractJSON.
func (mr *MockIAddonReaderMockRecorder) ExtractJSON(input any) *MockIAddonReaderExtractJSONCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractJSON", reflect.TypeOf((*MockIAddonReader)(nil).ExtractJSON), input)
	return &MockIAddonReaderExtractJSONCall{Call: call}
}

// MockIAddonReaderExtractJSONCall wrap *gomock.Call
type MockIAddonReaderExtractJSONCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonReaderExtractJSONCall) Return(arg0 string, arg1 bool) *MockIAddonReaderExtractJSONCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonReaderExtractJSONCall) Do(f func(string) (string, bool)) *MockIAddonReaderExtractJSONCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonReaderExtractJSONCall) DoAndReturn(f func(string) (string, bool)) *MockIAddonReaderExtractJSONCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAddons mocks base method.
func (m *MockIAddonReader) GetAddons() (map[string]*ez.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddons")
	ret0, _ := ret[0].(map[string]*ez.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddons indicates an expected call of GetAddons.
func (mr *MockIAddonReaderMockRecorder) GetAddons() *MockIAddonReaderGetAddonsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddons", reflect.TypeOf((*MockIAddonReader)(nil).GetAddons))
	return &MockIAddonReaderGetAddonsCall{Call: call}
}

// MockIAddonReaderGetAddonsCall wrap *gomock.Call
type MockIAddonReaderGetAddonsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonReaderGetAddonsCall) Return(arg0 map[string]*ez.Addon, arg1 error) *MockIAddonReaderGetAddonsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonReaderGetAddonsCall) Do(f func() (map[string]*ez.Addon, error)) *MockIAddonReaderGetAddonsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonReaderGetAddonsCall) DoAndReturn(f func() (map[string]*ez.Addon, error)) *MockIAddonReaderGetAddonsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
