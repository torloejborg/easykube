// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/config_utils.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/config_utils.go --destination mock/m_config_utils.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIEasykubeConfig is a mock of IEasykubeConfig interface.
type MockIEasykubeConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIEasykubeConfigMockRecorder
	isgomock struct{}
}

// MockIEasykubeConfigMockRecorder is the mock recorder for MockIEasykubeConfig.
type MockIEasykubeConfigMockRecorder struct {
	mock *MockIEasykubeConfig
}

// NewMockIEasykubeConfig creates a new mock instance.
func NewMockIEasykubeConfig(ctrl *gomock.Controller) *MockIEasykubeConfig {
	mock := &MockIEasykubeConfig{ctrl: ctrl}
	mock.recorder = &MockIEasykubeConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEasykubeConfig) EXPECT() *MockIEasykubeConfigMockRecorder {
	return m.recorder
}

// EditConfig mocks base method.
func (m *MockIEasykubeConfig) EditConfig() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EditConfig")
}

// EditConfig indicates an expected call of EditConfig.
func (mr *MockIEasykubeConfigMockRecorder) EditConfig() *MockIEasykubeConfigEditConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditConfig", reflect.TypeOf((*MockIEasykubeConfig)(nil).EditConfig))
	return &MockIEasykubeConfigEditConfigCall{Call: call}
}

// MockIEasykubeConfigEditConfigCall wrap *gomock.Call
type MockIEasykubeConfigEditConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIEasykubeConfigEditConfigCall) Return() *MockIEasykubeConfigEditConfigCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIEasykubeConfigEditConfigCall) Do(f func()) *MockIEasykubeConfigEditConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIEasykubeConfigEditConfigCall) DoAndReturn(f func()) *MockIEasykubeConfigEditConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LaunchEditor mocks base method.
func (m *MockIEasykubeConfig) LaunchEditor(config, editor string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LaunchEditor", config, editor)
}

// LaunchEditor indicates an expected call of LaunchEditor.
func (mr *MockIEasykubeConfigMockRecorder) LaunchEditor(config, editor any) *MockIEasykubeConfigLaunchEditorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchEditor", reflect.TypeOf((*MockIEasykubeConfig)(nil).LaunchEditor), config, editor)
	return &MockIEasykubeConfigLaunchEditorCall{Call: call}
}

// MockIEasykubeConfigLaunchEditorCall wrap *gomock.Call
type MockIEasykubeConfigLaunchEditorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIEasykubeConfigLaunchEditorCall) Return() *MockIEasykubeConfigLaunchEditorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIEasykubeConfigLaunchEditorCall) Do(f func(string, string)) *MockIEasykubeConfigLaunchEditorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIEasykubeConfigLaunchEditorCall) DoAndReturn(f func(string, string)) *MockIEasykubeConfigLaunchEditorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoadConfig mocks base method.
func (m *MockIEasykubeConfig) LoadConfig() (*ez.EasykubeConfigData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig")
	ret0, _ := ret[0].(*ez.EasykubeConfigData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockIEasykubeConfigMockRecorder) LoadConfig() *MockIEasykubeConfigLoadConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockIEasykubeConfig)(nil).LoadConfig))
	return &MockIEasykubeConfigLoadConfigCall{Call: call}
}

// MockIEasykubeConfigLoadConfigCall wrap *gomock.Call
type MockIEasykubeConfigLoadConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIEasykubeConfigLoadConfigCall) Return(arg0 *ez.EasykubeConfigData, arg1 error) *MockIEasykubeConfigLoadConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIEasykubeConfigLoadConfigCall) Do(f func() (*ez.EasykubeConfigData, error)) *MockIEasykubeConfigLoadConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIEasykubeConfigLoadConfigCall) DoAndReturn(f func() (*ez.EasykubeConfigData, error)) *MockIEasykubeConfigLoadConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeConfig mocks base method.
func (m *MockIEasykubeConfig) MakeConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeConfig indicates an expected call of MakeConfig.
func (mr *MockIEasykubeConfigMockRecorder) MakeConfig() *MockIEasykubeConfigMakeConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeConfig", reflect.TypeOf((*MockIEasykubeConfig)(nil).MakeConfig))
	return &MockIEasykubeConfigMakeConfigCall{Call: call}
}

// MockIEasykubeConfigMakeConfigCall wrap *gomock.Call
type MockIEasykubeConfigMakeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIEasykubeConfigMakeConfigCall) Return(arg0 error) *MockIEasykubeConfigMakeConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIEasykubeConfigMakeConfigCall) Do(f func() error) *MockIEasykubeConfigMakeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIEasykubeConfigMakeConfigCall) DoAndReturn(f func() error) *MockIEasykubeConfigMakeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
