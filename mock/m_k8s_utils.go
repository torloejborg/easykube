// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/k8s_utils.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/k8s_utils.go --destination mock/m_k8s_utils.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"
	time "time"

	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIK8SUtils is a mock of IK8SUtils interface.
type MockIK8SUtils struct {
	ctrl     *gomock.Controller
	recorder *MockIK8SUtilsMockRecorder
	isgomock struct{}
}

// MockIK8SUtilsMockRecorder is the mock recorder for MockIK8SUtils.
type MockIK8SUtilsMockRecorder struct {
	mock *MockIK8SUtils
}

// NewMockIK8SUtils creates a new mock instance.
func NewMockIK8SUtils(ctrl *gomock.Controller) *MockIK8SUtils {
	mock := &MockIK8SUtils{ctrl: ctrl}
	mock.recorder = &MockIK8SUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIK8SUtils) EXPECT() *MockIK8SUtilsMockRecorder {
	return m.recorder
}

// CopyFileToPod mocks base method.
func (m *MockIK8SUtils) CopyFileToPod(namespace, pod, container, localPath, remotePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileToPod", namespace, pod, container, localPath, remotePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFileToPod indicates an expected call of CopyFileToPod.
func (mr *MockIK8SUtilsMockRecorder) CopyFileToPod(namespace, pod, container, localPath, remotePath any) *MockIK8SUtilsCopyFileToPodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileToPod", reflect.TypeOf((*MockIK8SUtils)(nil).CopyFileToPod), namespace, pod, container, localPath, remotePath)
	return &MockIK8SUtilsCopyFileToPodCall{Call: call}
}

// MockIK8SUtilsCopyFileToPodCall wrap *gomock.Call
type MockIK8SUtilsCopyFileToPodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsCopyFileToPodCall) Return(arg0 error) *MockIK8SUtilsCopyFileToPodCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsCopyFileToPodCall) Do(f func(string, string, string, string, string) error) *MockIK8SUtilsCopyFileToPodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsCopyFileToPodCall) DoAndReturn(f func(string, string, string, string, string) error) *MockIK8SUtilsCopyFileToPodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateConfigmap mocks base method.
func (m *MockIK8SUtils) CreateConfigmap(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigmap", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigmap indicates an expected call of CreateConfigmap.
func (mr *MockIK8SUtilsMockRecorder) CreateConfigmap(name, namespace any) *MockIK8SUtilsCreateConfigmapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigmap", reflect.TypeOf((*MockIK8SUtils)(nil).CreateConfigmap), name, namespace)
	return &MockIK8SUtilsCreateConfigmapCall{Call: call}
}

// MockIK8SUtilsCreateConfigmapCall wrap *gomock.Call
type MockIK8SUtilsCreateConfigmapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsCreateConfigmapCall) Return(arg0 error) *MockIK8SUtilsCreateConfigmapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsCreateConfigmapCall) Do(f func(string, string) error) *MockIK8SUtilsCreateConfigmapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsCreateConfigmapCall) DoAndReturn(f func(string, string) error) *MockIK8SUtilsCreateConfigmapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecret mocks base method.
func (m *MockIK8SUtils) CreateSecret(namespace, secretName string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", namespace, secretName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockIK8SUtilsMockRecorder) CreateSecret(namespace, secretName, data any) *MockIK8SUtilsCreateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockIK8SUtils)(nil).CreateSecret), namespace, secretName, data)
	return &MockIK8SUtilsCreateSecretCall{Call: call}
}

// MockIK8SUtilsCreateSecretCall wrap *gomock.Call
type MockIK8SUtilsCreateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsCreateSecretCall) Return(arg0 error) *MockIK8SUtilsCreateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsCreateSecretCall) Do(f func(string, string, map[string]string) error) *MockIK8SUtilsCreateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsCreateSecretCall) DoAndReturn(f func(string, string, map[string]string) error) *MockIK8SUtilsCreateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteKeyFromConfigmap mocks base method.
func (m *MockIK8SUtils) DeleteKeyFromConfigmap(name, namespace, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteKeyFromConfigmap", name, namespace, key)
}

// DeleteKeyFromConfigmap indicates an expected call of DeleteKeyFromConfigmap.
func (mr *MockIK8SUtilsMockRecorder) DeleteKeyFromConfigmap(name, namespace, key any) *MockIK8SUtilsDeleteKeyFromConfigmapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyFromConfigmap", reflect.TypeOf((*MockIK8SUtils)(nil).DeleteKeyFromConfigmap), name, namespace, key)
	return &MockIK8SUtilsDeleteKeyFromConfigmapCall{Call: call}
}

// MockIK8SUtilsDeleteKeyFromConfigmapCall wrap *gomock.Call
type MockIK8SUtilsDeleteKeyFromConfigmapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsDeleteKeyFromConfigmapCall) Return() *MockIK8SUtilsDeleteKeyFromConfigmapCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsDeleteKeyFromConfigmapCall) Do(f func(string, string, string)) *MockIK8SUtilsDeleteKeyFromConfigmapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsDeleteKeyFromConfigmapCall) DoAndReturn(f func(string, string, string)) *MockIK8SUtilsDeleteKeyFromConfigmapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecInPod mocks base method.
func (m *MockIK8SUtils) ExecInPod(namespace, pod, command string, args []string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInPod", namespace, pod, command, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecInPod indicates an expected call of ExecInPod.
func (mr *MockIK8SUtilsMockRecorder) ExecInPod(namespace, pod, command, args any) *MockIK8SUtilsExecInPodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInPod", reflect.TypeOf((*MockIK8SUtils)(nil).ExecInPod), namespace, pod, command, args)
	return &MockIK8SUtilsExecInPodCall{Call: call}
}

// MockIK8SUtilsExecInPodCall wrap *gomock.Call
type MockIK8SUtilsExecInPodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsExecInPodCall) Return(arg0, arg1 string, arg2 error) *MockIK8SUtilsExecInPodCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsExecInPodCall) Do(f func(string, string, string, []string) (string, string, error)) *MockIK8SUtilsExecInPodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsExecInPodCall) DoAndReturn(f func(string, string, string, []string) (string, string, error)) *MockIK8SUtilsExecInPodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindContainerInPod mocks base method.
func (m *MockIK8SUtils) FindContainerInPod(deploymentName, namespace, containerPartialName string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindContainerInPod", deploymentName, namespace, containerPartialName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindContainerInPod indicates an expected call of FindContainerInPod.
func (mr *MockIK8SUtilsMockRecorder) FindContainerInPod(deploymentName, namespace, containerPartialName any) *MockIK8SUtilsFindContainerInPodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindContainerInPod", reflect.TypeOf((*MockIK8SUtils)(nil).FindContainerInPod), deploymentName, namespace, containerPartialName)
	return &MockIK8SUtilsFindContainerInPodCall{Call: call}
}

// MockIK8SUtilsFindContainerInPodCall wrap *gomock.Call
type MockIK8SUtilsFindContainerInPodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsFindContainerInPodCall) Return(arg0, arg1 string, arg2 error) *MockIK8SUtilsFindContainerInPodCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsFindContainerInPodCall) Do(f func(string, string, string) (string, string, error)) *MockIK8SUtilsFindContainerInPodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsFindContainerInPodCall) DoAndReturn(f func(string, string, string) (string, string, error)) *MockIK8SUtilsFindContainerInPodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstalledAddons mocks base method.
func (m *MockIK8SUtils) GetInstalledAddons() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledAddons")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledAddons indicates an expected call of GetInstalledAddons.
func (mr *MockIK8SUtilsMockRecorder) GetInstalledAddons() *MockIK8SUtilsGetInstalledAddonsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledAddons", reflect.TypeOf((*MockIK8SUtils)(nil).GetInstalledAddons))
	return &MockIK8SUtilsGetInstalledAddonsCall{Call: call}
}

// MockIK8SUtilsGetInstalledAddonsCall wrap *gomock.Call
type MockIK8SUtilsGetInstalledAddonsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsGetInstalledAddonsCall) Return(arg0 []string, arg1 error) *MockIK8SUtilsGetInstalledAddonsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsGetInstalledAddonsCall) Do(f func() ([]string, error)) *MockIK8SUtilsGetInstalledAddonsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsGetInstalledAddonsCall) DoAndReturn(f func() ([]string, error)) *MockIK8SUtilsGetInstalledAddonsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecret mocks base method.
func (m *MockIK8SUtils) GetSecret(name, namespace string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", name, namespace)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockIK8SUtilsMockRecorder) GetSecret(name, namespace any) *MockIK8SUtilsGetSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockIK8SUtils)(nil).GetSecret), name, namespace)
	return &MockIK8SUtilsGetSecretCall{Call: call}
}

// MockIK8SUtilsGetSecretCall wrap *gomock.Call
type MockIK8SUtilsGetSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsGetSecretCall) Return(arg0 map[string][]byte, arg1 error) *MockIK8SUtilsGetSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsGetSecretCall) Do(f func(string, string) (map[string][]byte, error)) *MockIK8SUtilsGetSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsGetSecretCall) DoAndReturn(f func(string, string) (map[string][]byte, error)) *MockIK8SUtilsGetSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasKubeConfig mocks base method.
func (m *MockIK8SUtils) HasKubeConfig() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasKubeConfig")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasKubeConfig indicates an expected call of HasKubeConfig.
func (mr *MockIK8SUtilsMockRecorder) HasKubeConfig() *MockIK8SUtilsHasKubeConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKubeConfig", reflect.TypeOf((*MockIK8SUtils)(nil).HasKubeConfig))
	return &MockIK8SUtilsHasKubeConfigCall{Call: call}
}

// MockIK8SUtilsHasKubeConfigCall wrap *gomock.Call
type MockIK8SUtilsHasKubeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsHasKubeConfigCall) Return(arg0 bool) *MockIK8SUtilsHasKubeConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsHasKubeConfigCall) Do(f func() bool) *MockIK8SUtilsHasKubeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsHasKubeConfigCall) DoAndReturn(f func() bool) *MockIK8SUtilsHasKubeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPods mocks base method.
func (m *MockIK8SUtils) ListPods(namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPods", namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods.
func (mr *MockIK8SUtilsMockRecorder) ListPods(namespace any) *MockIK8SUtilsListPodsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockIK8SUtils)(nil).ListPods), namespace)
	return &MockIK8SUtilsListPodsCall{Call: call}
}

// MockIK8SUtilsListPodsCall wrap *gomock.Call
type MockIK8SUtilsListPodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsListPodsCall) Return(arg0 []string, arg1 error) *MockIK8SUtilsListPodsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsListPodsCall) Do(f func(string) ([]string, error)) *MockIK8SUtilsListPodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsListPodsCall) DoAndReturn(f func(string) ([]string, error)) *MockIK8SUtilsListPodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PatchCoreDNS mocks base method.
func (m *MockIK8SUtils) PatchCoreDNS() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PatchCoreDNS")
}

// PatchCoreDNS indicates an expected call of PatchCoreDNS.
func (mr *MockIK8SUtilsMockRecorder) PatchCoreDNS() *MockIK8SUtilsPatchCoreDNSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCoreDNS", reflect.TypeOf((*MockIK8SUtils)(nil).PatchCoreDNS))
	return &MockIK8SUtilsPatchCoreDNSCall{Call: call}
}

// MockIK8SUtilsPatchCoreDNSCall wrap *gomock.Call
type MockIK8SUtilsPatchCoreDNSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsPatchCoreDNSCall) Return() *MockIK8SUtilsPatchCoreDNSCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsPatchCoreDNSCall) Do(f func()) *MockIK8SUtilsPatchCoreDNSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsPatchCoreDNSCall) DoAndReturn(f func()) *MockIK8SUtilsPatchCoreDNSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadConfigmap mocks base method.
func (m *MockIK8SUtils) ReadConfigmap(name, namespace string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfigmap", name, namespace)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfigmap indicates an expected call of ReadConfigmap.
func (mr *MockIK8SUtilsMockRecorder) ReadConfigmap(name, namespace any) *MockIK8SUtilsReadConfigmapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfigmap", reflect.TypeOf((*MockIK8SUtils)(nil).ReadConfigmap), name, namespace)
	return &MockIK8SUtilsReadConfigmapCall{Call: call}
}

// MockIK8SUtilsReadConfigmapCall wrap *gomock.Call
type MockIK8SUtilsReadConfigmapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsReadConfigmapCall) Return(arg0 map[string]string, arg1 error) *MockIK8SUtilsReadConfigmapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsReadConfigmapCall) Do(f func(string, string) (map[string]string, error)) *MockIK8SUtilsReadConfigmapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsReadConfigmapCall) DoAndReturn(f func(string, string) (map[string]string, error)) *MockIK8SUtilsReadConfigmapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransformExternalSecret mocks base method.
func (m *MockIK8SUtils) TransformExternalSecret(secret ez.ExternalSecret, mockData map[string]map[string]string, namespace string) ez.KubernetesSecret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformExternalSecret", secret, mockData, namespace)
	ret0, _ := ret[0].(ez.KubernetesSecret)
	return ret0
}

// TransformExternalSecret indicates an expected call of TransformExternalSecret.
func (mr *MockIK8SUtilsMockRecorder) TransformExternalSecret(secret, mockData, namespace any) *MockIK8SUtilsTransformExternalSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformExternalSecret", reflect.TypeOf((*MockIK8SUtils)(nil).TransformExternalSecret), secret, mockData, namespace)
	return &MockIK8SUtilsTransformExternalSecretCall{Call: call}
}

// MockIK8SUtilsTransformExternalSecretCall wrap *gomock.Call
type MockIK8SUtilsTransformExternalSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsTransformExternalSecretCall) Return(arg0 ez.KubernetesSecret) *MockIK8SUtilsTransformExternalSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsTransformExternalSecretCall) Do(f func(ez.ExternalSecret, map[string]map[string]string, string) ez.KubernetesSecret) *MockIK8SUtilsTransformExternalSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsTransformExternalSecretCall) DoAndReturn(f func(ez.ExternalSecret, map[string]map[string]string, string) ez.KubernetesSecret) *MockIK8SUtilsTransformExternalSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateConfigMap mocks base method.
func (m *MockIK8SUtils) UpdateConfigMap(name, namespace, key string, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateConfigMap", name, namespace, key, data)
}

// UpdateConfigMap indicates an expected call of UpdateConfigMap.
func (mr *MockIK8SUtilsMockRecorder) UpdateConfigMap(name, namespace, key, data any) *MockIK8SUtilsUpdateConfigMapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigMap", reflect.TypeOf((*MockIK8SUtils)(nil).UpdateConfigMap), name, namespace, key, data)
	return &MockIK8SUtilsUpdateConfigMapCall{Call: call}
}

// MockIK8SUtilsUpdateConfigMapCall wrap *gomock.Call
type MockIK8SUtilsUpdateConfigMapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsUpdateConfigMapCall) Return() *MockIK8SUtilsUpdateConfigMapCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsUpdateConfigMapCall) Do(f func(string, string, string, []byte)) *MockIK8SUtilsUpdateConfigMapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsUpdateConfigMapCall) DoAndReturn(f func(string, string, string, []byte)) *MockIK8SUtilsUpdateConfigMapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitForCRD mocks base method.
func (m *MockIK8SUtils) WaitForCRD(group, version, kind string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCRD", group, version, kind, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCRD indicates an expected call of WaitForCRD.
func (mr *MockIK8SUtilsMockRecorder) WaitForCRD(group, version, kind, timeout any) *MockIK8SUtilsWaitForCRDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCRD", reflect.TypeOf((*MockIK8SUtils)(nil).WaitForCRD), group, version, kind, timeout)
	return &MockIK8SUtilsWaitForCRDCall{Call: call}
}

// MockIK8SUtilsWaitForCRDCall wrap *gomock.Call
type MockIK8SUtilsWaitForCRDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsWaitForCRDCall) Return(arg0 error) *MockIK8SUtilsWaitForCRDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsWaitForCRDCall) Do(f func(string, string, string, time.Duration) error) *MockIK8SUtilsWaitForCRDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsWaitForCRDCall) DoAndReturn(f func(string, string, string, time.Duration) error) *MockIK8SUtilsWaitForCRDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitForDeploymentReadyWatch mocks base method.
func (m *MockIK8SUtils) WaitForDeploymentReadyWatch(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDeploymentReadyWatch", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDeploymentReadyWatch indicates an expected call of WaitForDeploymentReadyWatch.
func (mr *MockIK8SUtilsMockRecorder) WaitForDeploymentReadyWatch(name, namespace any) *MockIK8SUtilsWaitForDeploymentReadyWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDeploymentReadyWatch", reflect.TypeOf((*MockIK8SUtils)(nil).WaitForDeploymentReadyWatch), name, namespace)
	return &MockIK8SUtilsWaitForDeploymentReadyWatchCall{Call: call}
}

// MockIK8SUtilsWaitForDeploymentReadyWatchCall wrap *gomock.Call
type MockIK8SUtilsWaitForDeploymentReadyWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIK8SUtilsWaitForDeploymentReadyWatchCall) Return(arg0 error) *MockIK8SUtilsWaitForDeploymentReadyWatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIK8SUtilsWaitForDeploymentReadyWatchCall) Do(f func(string, string) error) *MockIK8SUtilsWaitForDeploymentReadyWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIK8SUtilsWaitForDeploymentReadyWatchCall) DoAndReturn(f func(string, string) error) *MockIK8SUtilsWaitForDeploymentReadyWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
