// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/cluster_utils.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/cluster_utils.go --destination mocks/m_cluster_utils.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIClusterUtils is a mock of IClusterUtils interface.
type MockIClusterUtils struct {
	ctrl     *gomock.Controller
	recorder *MockIClusterUtilsMockRecorder
	isgomock struct{}
}

// MockIClusterUtilsMockRecorder is the mock recorder for MockIClusterUtils.
type MockIClusterUtilsMockRecorder struct {
	mock *MockIClusterUtils
}

// NewMockIClusterUtils creates a new mock instance.
func NewMockIClusterUtils(ctrl *gomock.Controller) *MockIClusterUtils {
	mock := &MockIClusterUtils{ctrl: ctrl}
	mock.recorder = &MockIClusterUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClusterUtils) EXPECT() *MockIClusterUtilsMockRecorder {
	return m.recorder
}

// ConfigurationReport mocks base method.
func (m *MockIClusterUtils) ConfigurationReport(addonList []*ez.Addon) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationReport", addonList)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigurationReport indicates an expected call of ConfigurationReport.
func (mr *MockIClusterUtilsMockRecorder) ConfigurationReport(addonList any) *MockIClusterUtilsConfigurationReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationReport", reflect.TypeOf((*MockIClusterUtils)(nil).ConfigurationReport), addonList)
	return &MockIClusterUtilsConfigurationReportCall{Call: call}
}

// MockIClusterUtilsConfigurationReportCall wrap *gomock.Call
type MockIClusterUtilsConfigurationReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIClusterUtilsConfigurationReportCall) Return(arg0 string) *MockIClusterUtilsConfigurationReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIClusterUtilsConfigurationReportCall) Do(f func([]*ez.Addon) string) *MockIClusterUtilsConfigurationReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIClusterUtilsConfigurationReportCall) DoAndReturn(f func([]*ez.Addon) string) *MockIClusterUtilsConfigurationReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateKindCluster mocks base method.
func (m *MockIClusterUtils) CreateKindCluster(modules map[string]*ez.Addon) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKindCluster", modules)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateKindCluster indicates an expected call of CreateKindCluster.
func (mr *MockIClusterUtilsMockRecorder) CreateKindCluster(modules any) *MockIClusterUtilsCreateKindClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKindCluster", reflect.TypeOf((*MockIClusterUtils)(nil).CreateKindCluster), modules)
	return &MockIClusterUtilsCreateKindClusterCall{Call: call}
}

// MockIClusterUtilsCreateKindClusterCall wrap *gomock.Call
type MockIClusterUtilsCreateKindClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIClusterUtilsCreateKindClusterCall) Return(arg0 string) *MockIClusterUtilsCreateKindClusterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIClusterUtilsCreateKindClusterCall) Do(f func(map[string]*ez.Addon) string) *MockIClusterUtilsCreateKindClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIClusterUtilsCreateKindClusterCall) DoAndReturn(f func(map[string]*ez.Addon) string) *MockIClusterUtilsCreateKindClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsurePersistenceDirectory mocks base method.
func (m *MockIClusterUtils) EnsurePersistenceDirectory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePersistenceDirectory")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePersistenceDirectory indicates an expected call of EnsurePersistenceDirectory.
func (mr *MockIClusterUtilsMockRecorder) EnsurePersistenceDirectory() *MockIClusterUtilsEnsurePersistenceDirectoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePersistenceDirectory", reflect.TypeOf((*MockIClusterUtils)(nil).EnsurePersistenceDirectory))
	return &MockIClusterUtilsEnsurePersistenceDirectoryCall{Call: call}
}

// MockIClusterUtilsEnsurePersistenceDirectoryCall wrap *gomock.Call
type MockIClusterUtilsEnsurePersistenceDirectoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIClusterUtilsEnsurePersistenceDirectoryCall) Return(arg0 error) *MockIClusterUtilsEnsurePersistenceDirectoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIClusterUtilsEnsurePersistenceDirectoryCall) Do(f func() error) *MockIClusterUtilsEnsurePersistenceDirectoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIClusterUtilsEnsurePersistenceDirectoryCall) DoAndReturn(f func() error) *MockIClusterUtilsEnsurePersistenceDirectoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenderToYAML mocks base method.
func (m *MockIClusterUtils) RenderToYAML(addonList []*ez.Addon) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderToYAML", addonList)
	ret0, _ := ret[0].(string)
	return ret0
}

// RenderToYAML indicates an expected call of RenderToYAML.
func (mr *MockIClusterUtilsMockRecorder) RenderToYAML(addonList any) *MockIClusterUtilsRenderToYAMLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderToYAML", reflect.TypeOf((*MockIClusterUtils)(nil).RenderToYAML), addonList)
	return &MockIClusterUtilsRenderToYAMLCall{Call: call}
}

// MockIClusterUtilsRenderToYAMLCall wrap *gomock.Call
type MockIClusterUtilsRenderToYAMLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIClusterUtilsRenderToYAMLCall) Return(arg0 string) *MockIClusterUtilsRenderToYAMLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIClusterUtilsRenderToYAMLCall) Do(f func([]*ez.Addon) string) *MockIClusterUtilsRenderToYAMLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIClusterUtilsRenderToYAMLCall) DoAndReturn(f func([]*ez.Addon) string) *MockIClusterUtilsRenderToYAMLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
