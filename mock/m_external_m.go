// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/external_tools.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/external_tools.go --destination mock/m_external_m.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIExternalTools is a mock of IExternalTools interface.
type MockIExternalTools struct {
	ctrl     *gomock.Controller
	recorder *MockIExternalToolsMockRecorder
	isgomock struct{}
}

// MockIExternalToolsMockRecorder is the mock recorder for MockIExternalTools.
type MockIExternalToolsMockRecorder struct {
	mock *MockIExternalTools
}

// NewMockIExternalTools creates a new mock instance.
func NewMockIExternalTools(ctrl *gomock.Controller) *MockIExternalTools {
	mock := &MockIExternalTools{ctrl: ctrl}
	mock.recorder = &MockIExternalToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExternalTools) EXPECT() *MockIExternalToolsMockRecorder {
	return m.recorder
}

// ApplyYaml mocks base method.
func (m *MockIExternalTools) ApplyYaml(yamlFile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyYaml", yamlFile)
}

// ApplyYaml indicates an expected call of ApplyYaml.
func (mr *MockIExternalToolsMockRecorder) ApplyYaml(yamlFile any) *MockIExternalToolsApplyYamlCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyYaml", reflect.TypeOf((*MockIExternalTools)(nil).ApplyYaml), yamlFile)
	return &MockIExternalToolsApplyYamlCall{Call: call}
}

// MockIExternalToolsApplyYamlCall wrap *gomock.Call
type MockIExternalToolsApplyYamlCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsApplyYamlCall) Return() *MockIExternalToolsApplyYamlCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsApplyYamlCall) Do(f func(string)) *MockIExternalToolsApplyYamlCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsApplyYamlCall) DoAndReturn(f func(string)) *MockIExternalToolsApplyYamlCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteYaml mocks base method.
func (m *MockIExternalTools) DeleteYaml(yamlFile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteYaml", yamlFile)
}

// DeleteYaml indicates an expected call of DeleteYaml.
func (mr *MockIExternalToolsMockRecorder) DeleteYaml(yamlFile any) *MockIExternalToolsDeleteYamlCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteYaml", reflect.TypeOf((*MockIExternalTools)(nil).DeleteYaml), yamlFile)
	return &MockIExternalToolsDeleteYamlCall{Call: call}
}

// MockIExternalToolsDeleteYamlCall wrap *gomock.Call
type MockIExternalToolsDeleteYamlCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsDeleteYamlCall) Return() *MockIExternalToolsDeleteYamlCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsDeleteYamlCall) Do(f func(string)) *MockIExternalToolsDeleteYamlCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsDeleteYamlCall) DoAndReturn(f func(string)) *MockIExternalToolsDeleteYamlCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureLocalContext mocks base method.
func (m *MockIExternalTools) EnsureLocalContext() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnsureLocalContext")
}

// EnsureLocalContext indicates an expected call of EnsureLocalContext.
func (mr *MockIExternalToolsMockRecorder) EnsureLocalContext() *MockIExternalToolsEnsureLocalContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLocalContext", reflect.TypeOf((*MockIExternalTools)(nil).EnsureLocalContext))
	return &MockIExternalToolsEnsureLocalContextCall{Call: call}
}

// MockIExternalToolsEnsureLocalContextCall wrap *gomock.Call
type MockIExternalToolsEnsureLocalContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsEnsureLocalContextCall) Return() *MockIExternalToolsEnsureLocalContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsEnsureLocalContextCall) Do(f func()) *MockIExternalToolsEnsureLocalContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsEnsureLocalContextCall) DoAndReturn(f func()) *MockIExternalToolsEnsureLocalContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KustomizeBuild mocks base method.
func (m *MockIExternalTools) KustomizeBuild(dir string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KustomizeBuild", dir)
	ret0, _ := ret[0].(string)
	return ret0
}

// KustomizeBuild indicates an expected call of KustomizeBuild.
func (mr *MockIExternalToolsMockRecorder) KustomizeBuild(dir any) *MockIExternalToolsKustomizeBuildCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KustomizeBuild", reflect.TypeOf((*MockIExternalTools)(nil).KustomizeBuild), dir)
	return &MockIExternalToolsKustomizeBuildCall{Call: call}
}

// MockIExternalToolsKustomizeBuildCall wrap *gomock.Call
type MockIExternalToolsKustomizeBuildCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsKustomizeBuildCall) Return(arg0 string) *MockIExternalToolsKustomizeBuildCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsKustomizeBuildCall) Do(f func(string) string) *MockIExternalToolsKustomizeBuildCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsKustomizeBuildCall) DoAndReturn(f func(string) string) *MockIExternalToolsKustomizeBuildCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunCommand mocks base method.
func (m *MockIExternalTools) RunCommand(name string, args ...string) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockIExternalToolsMockRecorder) RunCommand(name any, args ...any) *MockIExternalToolsRunCommandCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockIExternalTools)(nil).RunCommand), varargs...)
	return &MockIExternalToolsRunCommandCall{Call: call}
}

// MockIExternalToolsRunCommandCall wrap *gomock.Call
type MockIExternalToolsRunCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsRunCommandCall) Return(stdout, stderr string, err error) *MockIExternalToolsRunCommandCall {
	c.Call = c.Call.Return(stdout, stderr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsRunCommandCall) Do(f func(string, ...string) (string, string, error)) *MockIExternalToolsRunCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsRunCommandCall) DoAndReturn(f func(string, ...string) (string, string, error)) *MockIExternalToolsRunCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SwitchContext mocks base method.
func (m *MockIExternalTools) SwitchContext(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SwitchContext", name)
}

// SwitchContext indicates an expected call of SwitchContext.
func (mr *MockIExternalToolsMockRecorder) SwitchContext(name any) *MockIExternalToolsSwitchContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchContext", reflect.TypeOf((*MockIExternalTools)(nil).SwitchContext), name)
	return &MockIExternalToolsSwitchContextCall{Call: call}
}

// MockIExternalToolsSwitchContextCall wrap *gomock.Call
type MockIExternalToolsSwitchContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIExternalToolsSwitchContextCall) Return() *MockIExternalToolsSwitchContextCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIExternalToolsSwitchContextCall) Do(f func(string)) *MockIExternalToolsSwitchContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIExternalToolsSwitchContextCall) DoAndReturn(f func(string)) *MockIExternalToolsSwitchContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
