// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/cobra_command_helper.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/cobra_command_helper.go --destination mock/m_cobra_command_helper.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICobraCommandHelper is a mock of ICobraCommandHelper interface.
type MockICobraCommandHelper struct {
	ctrl     *gomock.Controller
	recorder *MockICobraCommandHelperMockRecorder
	isgomock struct{}
}

// MockICobraCommandHelperMockRecorder is the mock recorder for MockICobraCommandHelper.
type MockICobraCommandHelperMockRecorder struct {
	mock *MockICobraCommandHelper
}

// NewMockICobraCommandHelper creates a new mock instance.
func NewMockICobraCommandHelper(ctrl *gomock.Controller) *MockICobraCommandHelper {
	mock := &MockICobraCommandHelper{ctrl: ctrl}
	mock.recorder = &MockICobraCommandHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICobraCommandHelper) EXPECT() *MockICobraCommandHelperMockRecorder {
	return m.recorder
}

// GetBoolFlag mocks base method.
func (m *MockICobraCommandHelper) GetBoolFlag(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoolFlag", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBoolFlag indicates an expected call of GetBoolFlag.
func (mr *MockICobraCommandHelperMockRecorder) GetBoolFlag(name any) *MockICobraCommandHelperGetBoolFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoolFlag", reflect.TypeOf((*MockICobraCommandHelper)(nil).GetBoolFlag), name)
	return &MockICobraCommandHelperGetBoolFlagCall{Call: call}
}

// MockICobraCommandHelperGetBoolFlagCall wrap *gomock.Call
type MockICobraCommandHelperGetBoolFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICobraCommandHelperGetBoolFlagCall) Return(arg0 bool) *MockICobraCommandHelperGetBoolFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICobraCommandHelperGetBoolFlagCall) Do(f func(string) bool) *MockICobraCommandHelperGetBoolFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICobraCommandHelperGetBoolFlagCall) DoAndReturn(f func(string) bool) *MockICobraCommandHelperGetBoolFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStringFlag mocks base method.
func (m *MockICobraCommandHelper) GetStringFlag(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringFlag", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStringFlag indicates an expected call of GetStringFlag.
func (mr *MockICobraCommandHelperMockRecorder) GetStringFlag(name any) *MockICobraCommandHelperGetStringFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringFlag", reflect.TypeOf((*MockICobraCommandHelper)(nil).GetStringFlag), name)
	return &MockICobraCommandHelperGetStringFlagCall{Call: call}
}

// MockICobraCommandHelperGetStringFlagCall wrap *gomock.Call
type MockICobraCommandHelperGetStringFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICobraCommandHelperGetStringFlagCall) Return(arg0 string) *MockICobraCommandHelperGetStringFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICobraCommandHelperGetStringFlagCall) Do(f func(string) string) *MockICobraCommandHelperGetStringFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICobraCommandHelperGetStringFlagCall) DoAndReturn(f func(string) string) *MockICobraCommandHelperGetStringFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsDryRun mocks base method.
func (m *MockICobraCommandHelper) IsDryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDryRun indicates an expected call of IsDryRun.
func (mr *MockICobraCommandHelperMockRecorder) IsDryRun() *MockICobraCommandHelperIsDryRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDryRun", reflect.TypeOf((*MockICobraCommandHelper)(nil).IsDryRun))
	return &MockICobraCommandHelperIsDryRunCall{Call: call}
}

// MockICobraCommandHelperIsDryRunCall wrap *gomock.Call
type MockICobraCommandHelperIsDryRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICobraCommandHelperIsDryRunCall) Return(arg0 bool) *MockICobraCommandHelperIsDryRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICobraCommandHelperIsDryRunCall) Do(f func() bool) *MockICobraCommandHelperIsDryRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICobraCommandHelperIsDryRunCall) DoAndReturn(f func() bool) *MockICobraCommandHelperIsDryRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsVerbose mocks base method.
func (m *MockICobraCommandHelper) IsVerbose() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVerbose")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsVerbose indicates an expected call of IsVerbose.
func (mr *MockICobraCommandHelperMockRecorder) IsVerbose() *MockICobraCommandHelperIsVerboseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVerbose", reflect.TypeOf((*MockICobraCommandHelper)(nil).IsVerbose))
	return &MockICobraCommandHelperIsVerboseCall{Call: call}
}

// MockICobraCommandHelperIsVerboseCall wrap *gomock.Call
type MockICobraCommandHelperIsVerboseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockICobraCommandHelperIsVerboseCall) Return(arg0 bool) *MockICobraCommandHelperIsVerboseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockICobraCommandHelperIsVerboseCall) Do(f func() bool) *MockICobraCommandHelperIsVerboseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockICobraCommandHelperIsVerboseCall) DoAndReturn(f func() bool) *MockICobraCommandHelperIsVerboseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
