// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ez/addon_types.go
//
// Generated by this command:
//
//	mockgen -typed --source pkg/ez/addon_types.go --destination mock/m_addon.go
//

// Package mock_ez is a generated GoMock package.
package mock_ez

import (
	reflect "reflect"

	afero "github.com/spf13/afero"
	ez "github.com/torloejborg/easykube/pkg/ez"
	gomock "go.uber.org/mock/gomock"
)

// MockIAddon is a mock of IAddon interface.
type MockIAddon struct {
	ctrl     *gomock.Controller
	recorder *MockIAddonMockRecorder
	isgomock struct{}
}

// MockIAddonMockRecorder is the mock recorder for MockIAddon.
type MockIAddonMockRecorder struct {
	mock *MockIAddon
}

// NewMockIAddon creates a new mock instance.
func NewMockIAddon(ctrl *gomock.Controller) *MockIAddon {
	mock := &MockIAddon{ctrl: ctrl}
	mock.recorder = &MockIAddonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddon) EXPECT() *MockIAddonMockRecorder {
	return m.recorder
}

// GetAddonFile mocks base method.
func (m *MockIAddon) GetAddonFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddonFile indicates an expected call of GetAddonFile.
func (mr *MockIAddonMockRecorder) GetAddonFile() *MockIAddonGetAddonFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonFile", reflect.TypeOf((*MockIAddon)(nil).GetAddonFile))
	return &MockIAddonGetAddonFileCall{Call: call}
}

// MockIAddonGetAddonFileCall wrap *gomock.Call
type MockIAddonGetAddonFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonGetAddonFileCall) Return(arg0 string) *MockIAddonGetAddonFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonGetAddonFileCall) Do(f func() string) *MockIAddonGetAddonFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonGetAddonFileCall) DoAndReturn(f func() string) *MockIAddonGetAddonFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConfig mocks base method.
func (m *MockIAddon) GetConfig() ez.AddonConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(ez.AddonConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockIAddonMockRecorder) GetConfig() *MockIAddonGetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockIAddon)(nil).GetConfig))
	return &MockIAddonGetConfigCall{Call: call}
}

// MockIAddonGetConfigCall wrap *gomock.Call
type MockIAddonGetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonGetConfigCall) Return(arg0 ez.AddonConfig) *MockIAddonGetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonGetConfigCall) Do(f func() ez.AddonConfig) *MockIAddonGetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonGetConfigCall) DoAndReturn(f func() ez.AddonConfig) *MockIAddonGetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetName mocks base method.
func (m *MockIAddon) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIAddonMockRecorder) GetName() *MockIAddonGetNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIAddon)(nil).GetName))
	return &MockIAddonGetNameCall{Call: call}
}

// MockIAddonGetNameCall wrap *gomock.Call
type MockIAddonGetNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonGetNameCall) Return(arg0 string) *MockIAddonGetNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonGetNameCall) Do(f func() string) *MockIAddonGetNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonGetNameCall) DoAndReturn(f func() string) *MockIAddonGetNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRootDir mocks base method.
func (m *MockIAddon) GetRootDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRootDir indicates an expected call of GetRootDir.
func (mr *MockIAddonMockRecorder) GetRootDir() *MockIAddonGetRootDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootDir", reflect.TypeOf((*MockIAddon)(nil).GetRootDir))
	return &MockIAddonGetRootDirCall{Call: call}
}

// MockIAddonGetRootDirCall wrap *gomock.Call
type MockIAddonGetRootDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonGetRootDirCall) Return(arg0 string) *MockIAddonGetRootDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonGetRootDirCall) Do(f func() string) *MockIAddonGetRootDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonGetRootDirCall) DoAndReturn(f func() string) *MockIAddonGetRootDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetShortName mocks base method.
func (m *MockIAddon) GetShortName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShortName indicates an expected call of GetShortName.
func (mr *MockIAddonMockRecorder) GetShortName() *MockIAddonGetShortNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortName", reflect.TypeOf((*MockIAddon)(nil).GetShortName))
	return &MockIAddonGetShortNameCall{Call: call}
}

// MockIAddonGetShortNameCall wrap *gomock.Call
type MockIAddonGetShortNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonGetShortNameCall) Return(arg0 string) *MockIAddonGetShortNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonGetShortNameCall) Do(f func() string) *MockIAddonGetShortNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonGetShortNameCall) DoAndReturn(f func() string) *MockIAddonGetShortNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadScriptFile mocks base method.
func (m *MockIAddon) ReadScriptFile(fs afero.Fs) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadScriptFile", fs)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadScriptFile indicates an expected call of ReadScriptFile.
func (mr *MockIAddonMockRecorder) ReadScriptFile(fs any) *MockIAddonReadScriptFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadScriptFile", reflect.TypeOf((*MockIAddon)(nil).ReadScriptFile), fs)
	return &MockIAddonReadScriptFileCall{Call: call}
}

// MockIAddonReadScriptFileCall wrap *gomock.Call
type MockIAddonReadScriptFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAddonReadScriptFileCall) Return(arg0 string) *MockIAddonReadScriptFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAddonReadScriptFileCall) Do(f func(afero.Fs) string) *MockIAddonReadScriptFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAddonReadScriptFileCall) DoAndReturn(f func(afero.Fs) string) *MockIAddonReadScriptFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
